{"version":3,"sources":["preface.txt","Sidebar.js","Preface.js","About.js","Prologue.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Sidebar","props","useState","state","setState","styles","bmMenuWrap","transition","isOpen","onStateChange","className","to","onClick","Preface","text","setText","useEffect","fileUrl","txt","fetch","then","r","t","toString","dangerouslySetInnerHTML","__html","About","Prologue","App","pageWrapId","outerContainerId","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,qC,8MCgC5BC,MA3Bf,SAAiBC,GAAQ,IAAD,EAEIC,oBAAS,GAFb,mBAEfC,EAFe,KAERC,EAFQ,KAUtB,OACE,kBAAC,QAAD,CAAMC,OAPM,CACZC,WAAY,CACVC,WAAY,aAKSC,OAAQL,EAAOM,cAAe,kBAAML,EAASH,EAAMO,UACxE,kBAAC,IAAD,CAAME,UAAU,YAAYC,GAAG,WAAWC,QAAS,kBAAIR,GAAS,KAAhE,WAIA,kBAAC,IAAD,CAAMM,UAAU,YAAYC,GAAG,YAAYC,QAAS,kBAAIR,GAAS,KAAjE,YAIA,kBAAC,IAAD,CAAMM,UAAU,YAAYC,GAAG,SAASC,QAAS,kBAAIR,GAAS,KAA9D,W,iBCKSS,MAzBf,SAAiBZ,GAAQ,IAAD,EAEEC,mBAAS,IAFX,mBAEfY,EAFe,KAETC,EAFS,KAYtB,OARAC,qBAAU,WACR,IAAMC,EAAUC,IAChBC,MAAMF,GACLG,MAAM,SAAAC,GAAC,OAAIA,EAAEP,UACbM,MAAM,SAAAE,GAAC,OAAIP,EAAQO,EAAEC,iBACrB,IAID,yBAAKb,UAAU,QACb,4BAAQA,UAAU,UAChB,uBAAGA,UAAU,SAAb,WACA,uBAAGA,UAAU,YAAb,kBAAuC,6BAAvC,gBAEF,8BACE,yBAAKA,UAAU,OAAOc,wBAAyB,CAAEC,OAAQX,QCDlDY,MAlBf,SAAezB,GAGb,OACE,yBAAKS,UAAU,QACb,4BAAQA,UAAU,UAChB,uBAAGA,UAAU,SAAb,SACA,uBAAGA,UAAU,YAAb,kBAAuC,6BAAvC,gBAEF,8BACE,yBAAKA,UAAU,QAAf,yBCMOiB,MAjBf,SAAkB1B,GAEhB,OACE,yBAAKS,UAAU,QACb,4BAAQA,UAAU,UAChB,uBAAGA,UAAU,SAAb,YACA,uBAAGA,UAAU,YAAb,kBAAuC,6BAAvC,gBAEF,8BACE,yBAAKA,UAAU,QAAf,yBCYOkB,MAdf,WAEE,OACI,8BACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CAASC,WAAY,YAAaC,iBAAkB,QACpD,kBAAC,IAAD,CAAOC,KAAM,IAAIC,UAAWnB,EAASoB,OAAK,IAC1C,kBAAC,IAAD,CAAOF,KAAM,WAAWC,UAAWnB,IACnC,kBAAC,IAAD,CAAOkB,KAAM,YAAYC,UAAWL,IACpC,kBAAC,IAAD,CAAOI,KAAM,SAASC,UAAWN,OCR3BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACM,kBAAC,EAAD,OAENC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e5619565.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preface.56170283.txt\";","import React, { useState } from \"react\";\r\nimport { slide as Menu } from \"react-burger-menu\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './burger.css'\r\n\r\nfunction Sidebar(props) {\r\n\r\n  const [state, setState] = useState(false);\r\n\r\n  const style = {\r\n    bmMenuWrap: {\r\n      transition: 'all 0.3s'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Menu styles = {style} isOpen={state} onStateChange={() => setState(props.isOpen)}>\r\n      <Link className=\"menu-item\" to=\"/preface\" onClick={()=>setState(false)}>\r\n        Preface\r\n      </Link>\r\n\r\n      <Link className=\"menu-item\" to=\"/prologue\" onClick={()=>setState(false)}>\r\n        Prologue\r\n      </Link>\r\n\r\n      <Link className=\"menu-item\" to=\"/about\" onClick={()=>setState(false)}>\r\n        About\r\n      </Link>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default Sidebar","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport txt from './preface.txt';\r\n\r\n\r\nfunction Preface(props) {\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fileUrl = txt;\r\n    fetch(fileUrl)\r\n    .then( r => r.text() )\r\n    .then( t => setText(t.toString()) );\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"Post\">\r\n      <header className=\"Header\">\r\n        <p className=\"Title\">Preface</p>\r\n        <p className=\"Subtitle\">I hate algebra.<br/>John Conway</p>\r\n      </header>\r\n      <body>\r\n        <div className=\"Body\" dangerouslySetInnerHTML={{ __html: text }}/>\r\n      </body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Preface","import React from 'react';\r\nimport './App.css';\r\n\r\n\r\n\r\nfunction About(props) {\r\n\r\n\r\n  return (\r\n    <div className=\"Post\">\r\n      <header className=\"Header\">\r\n        <p className=\"Title\">About</p>\r\n        <p className=\"Subtitle\">I hate algebra.<br/>John Conway</p>\r\n      </header>\r\n      <body>\r\n        <div className=\"Body\">\r\n            Under construction\r\n        </div>\r\n      </body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About","import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nfunction Prologue(props) {\r\n\r\n  return (\r\n    <div className=\"Post\">\r\n      <header className=\"Header\">\r\n        <p className=\"Title\">Prologue</p>\r\n        <p className=\"Subtitle\">I hate algebra.<br/>John Conway</p>\r\n      </header>\r\n      <body>\r\n        <div className=\"Body\">\r\n            Under construction\r\n        </div>\r\n      </body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Prologue","import React from 'react';\nimport {HashRouter, Route} from 'react-router-dom'\nimport './App.css';\nimport Sidebar from \"./Sidebar.js\"\n\nimport Preface from \"./Preface.js\"\nimport About from \"./About.js\"\nimport Prologue from \"./Prologue.js\"\n\n\n\nfunction App() {\n\n  return (\n      <main>\n          <HashRouter>\n              <Sidebar pageWrapId={\"page-wrap\"} outerContainerId={\"App\"} />\n              <Route path= '/' component={Preface} exact />\n              <Route path= '/preface' component={Preface}  />\n              <Route path= '/prologue' component={Prologue}  />\n              <Route path= '/about' component={About}  />\n          </HashRouter>\n      </main>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n        <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}